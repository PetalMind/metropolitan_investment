/**
 * Test skalowania inwestycji produktu
 * 
 * Skrypt testuje funkcjƒô Firebase Functions scaleProductInvestments
 * w ≈õrodowisku lokalnym.
 */

const { initializeApp, cert } = require('firebase-admin/app');
const { getFirestore } = require('firebase-admin/firestore');
const functions = require('firebase-functions-test')();

// Inicjalizuj Firebase Admin
try {
  // Pr√≥buj u≈ºyƒá ServiceAccount.json je≈õli istnieje, inaczej u≈ºyj domy≈õlnych credentials
  let app;
  try {
    const serviceAccount = require('./ServiceAccount.json');
    app = initializeApp({
      credential: cert(serviceAccount),
      projectId: 'metropolitaninvestment-6aa9b'
    });
    console.log('üî• Firebase Admin zainicjalizowane z ServiceAccount');
  } catch (serviceAccountError) {
    // Fallback do Application Default Credentials
    app = initializeApp({
      projectId: 'metropolitaninvestment-6aa9b'
    });
    console.log('üî• Firebase Admin zainicjalizowane z domy≈õlnymi credentials');
  }
} catch (error) {
  console.error('‚ùå B≈ÇƒÖd inicjalizacji Firebase Admin:', error);
  process.exit(1);
}

const db = getFirestore();

// Import funkcji skalowania
const { scaleProductInvestments } = require('./services/investment-scaling-service');

/**
 * Test funkcji skalowania
 */
async function testInvestmentScaling() {
  console.log('\nüß™ TEST SKALOWANIA INWESTYCJI PRODUKTU\n');

  try {
    // üîç Znajd≈∫ przyk≈Çadowy produkt z inwestycjami
    console.log('üîç Szukam produkt√≥w z inwestycjami...');

    const investmentsSnapshot = await db.collection('investments').limit(5).get();
    if (investmentsSnapshot.empty) {
      console.log('‚ùå Brak inwestycji w bazie danych');
      return;
    }

    const sampleInvestment = investmentsSnapshot.docs[0].data();
    const productName = sampleInvestment.productName || sampleInvestment.nazwa_produktu;

    if (!productName) {
      console.log('‚ùå Brak nazwy produktu w przyk≈Çadowej inwestycji');
      return;
    }

    console.log(`üìã Wybrany produkt do testu: "${productName}"`);

    // üìä Sprawd≈∫ obecnƒÖ sytuacjƒô produktu
    console.log('\nüìä Analiza obecnego stanu produktu...');

    const productInvestmentsQuery = await db.collection('investments')
      .where('productName', '==', productName)
      .get();

    let currentTotal = 0;
    productInvestmentsQuery.docs.forEach(doc => {
      const data = doc.data();
      const amount = parseFloat(data.investmentAmount || data.kwota_inwestycji || 0);
      currentTotal += amount;
    });

    console.log(`   - Liczba inwestycji: ${productInvestmentsQuery.docs.length}`);
    console.log(`   - Obecna suma: ${currentTotal.toFixed(2)} PLN`);

    if (currentTotal <= 0) {
      console.log('‚ùå Obecna suma wynosi 0 - nie mo≈ºna testowaƒá skalowania');
      return;
    }

    // üéØ TEST 1: Skalowanie w g√≥rƒô (+20%)
    console.log('\nüéØ TEST 1: Skalowanie w g√≥rƒô (+20%)');
    const newTotalAmount = currentTotal * 1.2;

    const testData = {
      productName: productName,
      newTotalAmount: newTotalAmount,
      reason: 'Test skalowania w g√≥rƒô +20%',
      userId: 'test_user_123',
      userEmail: 'test@example.com'
    };

    console.log('üì§ Wywo≈Çujƒô funkcjƒô skalowania...');
    console.log(`   - Produkt: ${productName}`);
    console.log(`   - Nowa kwota: ${newTotalAmount.toFixed(2)} PLN`);
    console.log(`   - Wsp√≥≈Çczynnik: 1.2 (120%)`);

    // Mock request object
    const mockRequest = {
      data: testData
    };

    const result = await scaleProductInvestments(mockRequest);

    console.log('\n‚úÖ Wynik skalowania:');
    console.log(`   - Status: ${result.success ? 'Sukces' : 'B≈ÇƒÖd'}`);
    if (result.summary) {
      console.log(`   - Poprzednia kwota: ${result.summary.previousTotalAmount.toFixed(2)} PLN`);
      console.log(`   - Nowa kwota: ${result.summary.newTotalAmount.toFixed(2)} PLN`);
      console.log(`   - Wsp√≥≈Çczynnik: ${result.summary.scalingFactor.toFixed(4)}`);
      console.log(`   - Zaktualizowano inwestycji: ${result.summary.affectedInvestments}`);
      console.log(`   - Czas wykonania: ${result.summary.executionTimeMs}ms`);
    }

    if (result.details && result.details.length > 0) {
      console.log('\nüìã Szczeg√≥≈Çy zmian (pierwsze 3):');
      result.details.slice(0, 3).forEach((detail, index) => {
        console.log(`   ${index + 1}. ${detail.clientName || detail.investmentId}:`);
        console.log(`      ${detail.oldAmount.toFixed(2)} ‚Üí ${detail.newAmount.toFixed(2)} PLN`);
        console.log(`      R√≥≈ºnica: ${detail.difference.toFixed(2)} PLN`);
      });
    }

    // üîÑ TEST 2: Przywr√≥ƒá pierwotny stan (skalowanie w d√≥≈Ç)
    console.log('\nüîÑ TEST 2: Przywracanie pierwotnego stanu');

    const restoreData = {
      productName: productName,
      newTotalAmount: currentTotal,
      reason: 'Przywr√≥cenie pierwotnego stanu po te≈õcie',
      userId: 'test_user_123',
      userEmail: 'test@example.com'
    };

    const mockRestoreRequest = {
      data: restoreData
    };

    const restoreResult = await scaleProductInvestments(mockRestoreRequest);

    console.log('‚úÖ Przywr√≥cenie stanu:');
    console.log(`   - Status: ${restoreResult.success ? 'Sukces' : 'B≈ÇƒÖd'}`);
    if (restoreResult.summary) {
      console.log(`   - Przywr√≥cono do: ${restoreResult.summary.newTotalAmount.toFixed(2)} PLN`);
      console.log(`   - Wsp√≥≈Çczynnik: ${restoreResult.summary.scalingFactor.toFixed(4)}`);
    }

    // üìà Weryfikacja ko≈Ñcowa
    console.log('\nüìà Weryfikacja ko≈Ñcowa...');
    const finalCheck = await db.collection('investments')
      .where('productName', '==', productName)
      .get();

    let finalTotal = 0;
    finalCheck.docs.forEach(doc => {
      const data = doc.data();
      const amount = parseFloat(data.investmentAmount || data.kwota_inwestycji || 0);
      finalTotal += amount;
    });

    const difference = Math.abs(finalTotal - currentTotal);
    console.log(`   - Ko≈Ñcowa suma: ${finalTotal.toFixed(2)} PLN`);
    console.log(`   - Oryginalna suma: ${currentTotal.toFixed(2)} PLN`);
    console.log(`   - R√≥≈ºnica: ${difference.toFixed(2)} PLN`);

    if (difference < 0.01) {
      console.log('‚úÖ TEST ZAKO≈ÉCZONY POMY≈öLNIE - Stan przywr√≥cony');
    } else {
      console.log('‚ö†Ô∏è UWAGA: Stan nie zosta≈Ç w pe≈Çni przywr√≥cony');
    }

    // üìù Sprawd≈∫ historiƒô
    console.log('\nüìù Sprawdzanie historii operacji...');
    const historySnapshot = await db.collection('scaling_history')
      .where('productName', '==', productName)
      .orderBy('timestamp', 'desc')
      .limit(2)
      .get();

    console.log(`   - Znaleziono ${historySnapshot.docs.length} wpis√≥w historii`);
    historySnapshot.docs.forEach((doc, index) => {
      const histData = doc.data();
      console.log(`   ${index + 1}. ${histData.operationType} - ${histData.reason}`);
      console.log(`      Wykonane: ${histData.timestamp?.toDate?.()?.toLocaleString('pl-PL') || histData.timestamp}`);
      console.log(`      Przez: ${histData.executedBy}`);
    });

    console.log('\nüéâ TEST KOMPLETNY');

  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas testu:', error);
    console.error('Stack trace:', error.stack);
  }
}

/**
 * Test walidacji danych wej≈õciowych
 */
async function testValidation() {
  console.log('\nüß™ TEST WALIDACJI DANYCH WEJ≈öCIOWYCH\n');

  const testCases = [
    {
      name: 'Brak productId i productName',
      data: {
        newTotalAmount: 1000,
        userId: 'test',
        userEmail: 'test@example.com'
      },
      expectedError: 'invalid-argument'
    },
    {
      name: 'Ujemna kwota',
      data: {
        productName: 'Test Product',
        newTotalAmount: -100,
        userId: 'test',
        userEmail: 'test@example.com'
      },
      expectedError: 'invalid-argument'
    },
    {
      name: 'Brak danych u≈ºytkownika',
      data: {
        productName: 'Test Product',
        newTotalAmount: 1000
      },
      expectedError: 'unauthenticated'
    }
  ];

  for (const testCase of testCases) {
    console.log(`üìã Test: ${testCase.name}`);

    try {
      const mockRequest = { data: testCase.data };
      await scaleProductInvestments(mockRequest);
      console.log('‚ùå B≈ÅƒÑD: Test powinien zako≈Ñczyƒá siƒô b≈Çƒôdem');
    } catch (error) {
      if (error.code === testCase.expectedError) {
        console.log(`‚úÖ OK: Poprawny b≈ÇƒÖd - ${error.code}`);
      } else {
        console.log(`‚ö†Ô∏è Nieoczekiwany b≈ÇƒÖd: ${error.code} (oczekiwano: ${testCase.expectedError})`);
      }
    }
  }
}

/**
 * G≈Ç√≥wna funkcja testowa
 */
async function main() {
  console.log('üöÄ ROZPOCZYNAM TESTY SKALOWANIA INWESTYCJI\n');

  try {
    await testValidation();
    await testInvestmentScaling();
  } catch (error) {
    console.error('üí• Krytyczny b≈ÇƒÖd testu:', error);
  } finally {
    console.log('\nüèÅ KONIEC TEST√ìW');
    process.exit(0);
  }
}

// Uruchom testy
if (require.main === module) {
  main();
}

module.exports = {
  testInvestmentScaling,
  testValidation,
};
