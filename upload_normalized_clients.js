const admin = require('firebase-admin');
const fs = require('fs');
const path = require('path');

// Konfiguracja Firebase Admin
const serviceAccount = {
  type: "service_account",
  project_id: "cosmopolitan-investment",
  private_key_id: process.env.FIREBASE_PRIVATE_KEY_ID,
  private_key: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
  client_email: process.env.FIREBASE_CLIENT_EMAIL,
  client_id: process.env.FIREBASE_CLIENT_ID,
  auth_uri: "https://accounts.google.com/o/oauth2/auth",
  token_uri: "https://oauth2.googleapis.com/token",
  auth_provider_x509_cert_url: "https://www.googleapis.com/oauth2/v1/certs",
  client_x509_cert_url: process.env.FIREBASE_CLIENT_CERT_URL
};

class NormalizedClientsUploader {
  constructor() {
    this.db = null;
    this.batchSize = 500; // Firestore batch limit
    this.uploadStats = {
      total: 0,
      uploaded: 0,
      updated: 0,
      errors: 0,
      startTime: null,
      endTime: null
    };
    this.dryRun = false;
    this.cleanup = false;
    this.showReport = false;
  }

  async initialize() {
    try {
      console.log('üî• Inicjalizacja Firebase Admin...');

      // Spr√≥buj u≈ºyƒá pliku service account (prostsze i bardziej niezawodne)
      const serviceAccountPath = path.join(__dirname, 'service-account.json');
      if (fs.existsSync(serviceAccountPath)) {
        console.log('üìÑ U≈ºywam pliku service-account.json...');
        const serviceAccountFile = require(serviceAccountPath);
        admin.initializeApp({
          credential: admin.credential.cert(serviceAccountFile),
        });
      } else {
        console.log('‚ö†Ô∏è  Brak pliku service-account.json, pr√≥bujƒô zmienne ≈õrodowiskowe...');

        // Sprawd≈∫ czy mamy wszystkie wymagane zmienne ≈õrodowiskowe
        const requiredVars = ['FIREBASE_PRIVATE_KEY', 'FIREBASE_CLIENT_EMAIL', 'FIREBASE_CLIENT_ID'];
        const missingVars = requiredVars.filter(varName => !process.env[varName]);

        if (missingVars.length > 0) {
          throw new Error(`Brakuje zmiennych ≈õrodowiskowych: ${missingVars.join(', ')} lub pliku service-account.json`);
        }

        admin.initializeApp({
          credential: admin.credential.cert(serviceAccount),
          projectId: serviceAccount.project_id
        });
      }

      this.db = admin.firestore();
      console.log('‚úÖ Firebase zainicjalizowany pomy≈õlnie!');

      // Test po≈ÇƒÖczenia - dopiero po inicjalizacji
      if (!this.dryRun) {
        await this.db.collection('clients').limit(1).get();
        console.log('‚úÖ Po≈ÇƒÖczenie z Firestore potwierdzone!');
      }

    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd inicjalizacji Firebase:', error.message);
      throw error;
    }
  }

  async loadNormalizedClientsData() {
    try {
      console.log('üìÑ ≈Åadowanie znormalizowanych danych klient√≥w...');
      const filePath = path.join(__dirname, 'split_investment_data_normalized', 'clients_normalized.json');

      if (!fs.existsSync(filePath)) {
        throw new Error(`Plik ${filePath} nie istnieje`);
      }

      const rawData = fs.readFileSync(filePath, 'utf8');
      const clients = JSON.parse(rawData);

      console.log(`‚úÖ Za≈Çadowano ${clients.length} klient√≥w z pliku znormalizowanego`);
      this.uploadStats.total = clients.length;

      // Poka≈º przyk≈Çad struktury danych
      if (clients.length > 0) {
        console.log('üìã Przyk≈Çad struktury danych:');
        const sample = clients[0];
        Object.keys(sample).forEach(key => {
          console.log(`   ${key}: "${sample[key]}"`);
        });
      }

      return clients;
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd ≈Çadowania danych:', error.message);
      throw error;
    }
  }

  async checkExistingClients() {
    if (this.dryRun) {
      console.log('üîç (DRY RUN) Pomijam sprawdzanie istniejƒÖcych klient√≥w...');
      return 0;
    }

    try {
      console.log('üîç Sprawdzanie istniejƒÖcych klient√≥w w bazie...');
      const snapshot = await this.db.collection('clients').get();
      console.log(`üìä Znaleziono ${snapshot.size} istniejƒÖcych klient√≥w w bazie`);
      return snapshot.size;
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd sprawdzania istniejƒÖcych klient√≥w:', error.message);
      return 0;
    }
  }

  async cleanupExistingClients() {
    if (this.dryRun) {
      console.log('üßπ (DRY RUN) Symulacja czyszczenia kolekcji clients...');
      return;
    }

    if (!this.cleanup) {
      console.log('‚è≠Ô∏è  Pomijam czyszczenie (u≈ºyj --cleanup aby wyczy≈õciƒá)');
      return;
    }

    try {
      console.log('üßπ Czyszczenie istniejƒÖcej kolekcji clients...');

      const batchSize = 500;
      const collection = this.db.collection('clients');

      let deletedCount = 0;
      let hasMore = true;

      while (hasMore) {
        const snapshot = await collection.limit(batchSize).get();

        if (snapshot.empty) {
          hasMore = false;
          break;
        }

        const batch = this.db.batch();
        snapshot.docs.forEach(doc => {
          batch.delete(doc.ref);
        });

        await batch.commit();
        deletedCount += snapshot.size;
        console.log(`   üóëÔ∏è  Usuniƒôto ${deletedCount} dokument√≥w...`);
      }

      console.log(`‚úÖ Wyczyszczono ${deletedCount} istniejƒÖcych klient√≥w`);
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd czyszczenia:', error.message);
      throw error;
    }
  }

  async uploadClientsInBatches(clients) {
    this.uploadStats.startTime = new Date();
    console.log(`üöÄ ${this.dryRun ? '(DRY RUN) ' : ''}Rozpoczynam upload ${clients.length} klient√≥w...`);

    const batches = [];
    for (let i = 0; i < clients.length; i += this.batchSize) {
      const batch = clients.slice(i, i + this.batchSize);
      batches.push(batch);
    }

    console.log(`üì¶ Podzielono na ${batches.length} batchy po ${this.batchSize} klient√≥w`);

    for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {
      const batch = batches[batchIndex];
      console.log(`\nüì§ ${this.dryRun ? '(DRY RUN) ' : ''}Przetwarzam batch ${batchIndex + 1}/${batches.length} (${batch.length} klient√≥w)...`);

      await this.uploadBatch(batch, batchIndex);

      // Kr√≥tka przerwa miƒôdzy batchami
      if (batchIndex < batches.length - 1 && !this.dryRun) {
        console.log('‚è±Ô∏è  Przerwa 1s miƒôdzy batchami...');
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }

    this.uploadStats.endTime = new Date();
    this.printFinalStats();
  }

  async uploadBatch(clientsBatch, batchIndex) {
    const batchErrors = [];

    if (this.dryRun) {
      // Symulacja - tylko walidacja danych
      for (const client of clientsBatch) {
        try {
          this.validateAndTransformClient(client);
        } catch (error) {
          batchErrors.push(`B≈ÇƒÖd walidacji klienta ID ${client.id}: ${error.message}`);
        }
      }

      this.uploadStats.uploaded += clientsBatch.length - batchErrors.length;
      this.uploadStats.errors += batchErrors.length;

      console.log(`   ‚úÖ (DRY RUN) Zwalidowano ${clientsBatch.length - batchErrors.length} klient√≥w`);
      if (batchErrors.length > 0) {
        console.log(`   ‚ö†Ô∏è  B≈Çƒôdy walidacji: ${batchErrors.length}`);
        if (this.showReport || batchErrors.length <= 5) {
          batchErrors.forEach(error => console.log(`      - ${error}`));
        } else {
          console.log(`      - ${batchErrors[0]}`);
          console.log(`      - ${batchErrors[1] || '...'}`);
          console.log(`      ... i ${batchErrors.length - 2} wiƒôcej (u≈ºyj --report dla pe≈Çnej listy)`);
        }
      }
      return;
    }

    // Rzeczywisty upload
    const batch = this.db.batch();

    for (const client of clientsBatch) {
      try {
        const clientData = this.validateAndTransformClient(client);

        // U≈ºywaj ID klienta jako document ID w Firestore
        const documentId = client.id.toString();
        const docRef = this.db.collection('clients').doc(documentId);
        batch.set(docRef, clientData, { merge: true });

        // Loguj mapowanie ID dla debugowania (tylko pierwszy w batchu + przyk≈Çady sp√≥≈Çek)
        if (clientsBatch.indexOf(client) === 0) {
          console.log(`   üîó Document ID: ${documentId} (u≈ºywam oryginalnego ID klienta)`);
        }

        // Loguj przyk≈Çady sp√≥≈Çek (gdy u≈ºywamy companyName jako fullName)
        const fullName = client.fullName ? client.fullName.trim() : '';
        const companyName = client.companyName ? client.companyName.trim() : '';
        if ((fullName === '' || fullName === ' ') && companyName !== '' && clientsBatch.indexOf(client) < 3) {
          console.log(`   üè¢ ID ${client.id}: Sp√≥≈Çka "${companyName}" -> fullName`);
        }

      } catch (error) {
        batchErrors.push(`B≈ÇƒÖd przetwarzania klienta ID ${client.id}: ${error.message}`);
      }
    }

    try {
      await batch.commit();
      this.uploadStats.uploaded += clientsBatch.length - batchErrors.length;
      this.uploadStats.errors += batchErrors.length;

      console.log(`   ‚úÖ Zapisano ${clientsBatch.length - batchErrors.length} klient√≥w`);
      if (batchErrors.length > 0) {
        console.log(`   ‚ö†Ô∏è  B≈Çƒôdy: ${batchErrors.length}`);
        if (this.showReport || batchErrors.length <= 5) {
          // Poka≈º b≈Çƒôdy je≈õli jest raport lub ma≈Ço b≈Çƒôd√≥w
          batchErrors.forEach(error => console.log(`      - ${error}`));
        } else {
          // Poka≈º tylko kilka pierwszych b≈Çƒôd√≥w
          console.log(`      - ${batchErrors[0]}`);
          console.log(`      - ${batchErrors[1] || '...'}`);
          console.log(`      ... i ${batchErrors.length - 2} wiƒôcej (u≈ºyj --report dla pe≈Çnej listy)`);
        }
      }

    } catch (error) {
      console.error(`   ‚ùå B≈ÇƒÖd zapisu batch ${batchIndex + 1}:`, error.message);
      this.uploadStats.errors += clientsBatch.length;
    }
  }

  validateAndTransformClient(client) {
    // Walidacja wymaganych p√≥l
    if (!client.id) {
      throw new Error('Brak pola id');
    }

    // Sprawd≈∫ fullName - je≈õli puste, u≈ºyj companyName
    let fullName = client.fullName ? client.fullName.trim() : '';
    let companyName = client.companyName ? client.companyName.trim() : '';

    if (fullName === '' || fullName === ' ') {
      if (companyName !== '') {
        // Dla sp√≥≈Çek u≈ºyj companyName jako fullName
        fullName = companyName;
        console.log(`   üè¢ ID ${client.id}: U≈ºywam companyName "${companyName}" jako fullName`);
      } else {
        throw new Error('Brak fullName i companyName');
      }
    }

    // Transformacja danych zgodna z ≈ºƒÖdanƒÖ strukturƒÖ Firebase
    const clientData = {
      // G≈Ç√≥wne pola - prosta struktura
      id: client.id, // Numeryczne ID
      fullName: fullName,
      companyName: companyName,
      phone: client.phone || "",
      email: client.email || "",

      // Metadane
      dataVersion: "2.0",
      migrationSource: "normalized_json_import",

      // Daty jako Firebase Timestamps
      createdAt: admin.firestore.Timestamp.fromDate(
        client.created_at ? new Date(client.created_at) : new Date()
      ),
      uploadedAt: admin.firestore.Timestamp.fromDate(new Date())
    };

    return clientData;
  }

  async verifyUpload() {
    if (this.dryRun) {
      console.log('\nüîç (DRY RUN) Symulacja weryfikacji zako≈Ñczona');
      return;
    }

    try {
      console.log('\nüîç Weryfikacja uploadu...');
      const snapshot = await this.db.collection('clients').get();
      const uploadedCount = snapshot.size;

      console.log(`üìä Klient√≥w w bazie po uploadzie: ${uploadedCount}`);
      console.log(`üìä Oczekiwano: ${this.uploadStats.total}`);

      if (uploadedCount >= this.uploadStats.total) {
        console.log('‚úÖ Weryfikacja pomy≈õlna - wszyscy klienci zostali zapisani!');
      } else {
        console.log(`‚ö†Ô∏è  Mo≈ºliwe braki: ${this.uploadStats.total - uploadedCount} klient√≥w`);
      }

      // Poka≈º przyk≈Çady zapisanych klient√≥w
      if (this.showReport) {
        console.log('\nüìã Przyk≈Çady zapisanych klient√≥w:');
        const sampleDocs = await this.db.collection('clients').limit(5).get();
        sampleDocs.forEach((doc, index) => {
          const data = doc.data();
          console.log(`   ${index + 1}. Document ID: ${doc.id}`);
          console.log(`      id: ${data.id} (number)`);
          console.log(`      fullName: "${data.fullName}"`);
          console.log(`      companyName: "${data.companyName}"`);
          console.log(`      email: "${data.email}"`);
          console.log(`      phone: "${data.phone}"`);
          console.log(`      dataVersion: "${data.dataVersion}"`);
          console.log(`      migrationSource: "${data.migrationSource}"`);
          console.log('');
        });
      }

    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd weryfikacji:', error.message);
    }
  }

  async generateReport() {
    if (!this.showReport) return;

    try {
      console.log('\nüìä SZCZEG√ì≈ÅOWY RAPORT:');
      console.log('='.repeat(50));

      if (this.dryRun) {
        console.log('üîç TRYB DRY RUN - dane nie zosta≈Çy zapisane');
      } else {
        const snapshot = await this.db.collection('clients').get();

        // Statystyki emaili
        let withEmail = 0;
        let withPhone = 0;
        let withCompany = 0;
        let uniqueEmails = new Set();

        snapshot.forEach(doc => {
          const data = doc.data();
          if (data.email && data.email.trim() !== '') {
            withEmail++;
            uniqueEmails.add(data.email.toLowerCase());
          }
          if (data.phone && data.phone.trim() !== '') {
            withPhone++;
          }
          if (data.companyName && data.companyName.trim() !== '') {
            withCompany++;
          }
        });

        console.log(`üìß Klienci z emailem: ${withEmail} (${Math.round(withEmail / snapshot.size * 100)}%)`);
        console.log(`üì± Klienci z telefonem: ${withPhone} (${Math.round(withPhone / snapshot.size * 100)}%)`);
        console.log(`üè¢ Klienci z firmƒÖ: ${withCompany} (${Math.round(withCompany / snapshot.size * 100)}%)`);
        console.log(`üîÑ Unikalne emaile: ${uniqueEmails.size}`);

        if (withEmail !== uniqueEmails.size) {
          console.log(`‚ö†Ô∏è  Duplikaty emaili: ${withEmail - uniqueEmails.size}`);
        }

        // Analiza b≈Çƒôd√≥w je≈õli by≈Çy
        if (this.uploadStats.errors > 0) {
          console.log('\nüîç ANALIZA B≈ÅƒòD√ìW:');
          await this.analyzeFailedRecords();
        }
      }

    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd generowania raportu:', error.message);
    }
  }

  async analyzeFailedRecords() {
    try {
      console.log('üìã Sprawdzanie kt√≥re rekordy nie zosta≈Çy zapisane...');

      // Za≈Çaduj oryginalne dane
      const originalClients = await this.loadNormalizedClientsData();

      // Pobierz zapisane ID z Firebase
      const snapshot = await this.db.collection('clients').get();
      const savedIds = new Set();

      snapshot.forEach(doc => {
        savedIds.add(parseInt(doc.id));
      });

      // Znajd≈∫ brakujƒÖce rekordy
      const missingRecords = originalClients.filter(client => !savedIds.has(client.id));

      console.log(`‚ùå Rekordy nie zapisane (${missingRecords.length}):`);
      missingRecords.slice(0, 10).forEach(client => {
        console.log(`   ID: ${client.id}, Nazwa: "${client.fullName}"`);

        // Sprawd≈∫ co mog≈Ço byƒá nie tak
        const issues = [];
        if (!client.fullName || client.fullName.trim() === '') issues.push('brak fullName');
        if (!client.id) issues.push('brak id');
        if (typeof client.id !== 'number') issues.push('id nie jest liczbƒÖ');

        if (issues.length > 0) {
          console.log(`      Problemy: ${issues.join(', ')}`);
        }
      });

      if (missingRecords.length > 10) {
        console.log(`   ... i ${missingRecords.length - 10} wiƒôcej`);
      }

      // Sugestie naprawy
      if (missingRecords.length > 0) {
        console.log('\nüí° SUGESTIE NAPRAWY:');
        console.log('   1. Uruchom ponownie upload - niekt√≥re b≈Çƒôdy mogƒÖ byƒá przej≈õciowe');
        console.log('   2. Sprawd≈∫ czy brakujƒÖce rekordy majƒÖ prawid≈Çowe dane');
        console.log('   3. U≈ºyj --cleanup aby wyczy≈õciƒá i spr√≥bowaƒá ponownie');
      }

    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd analizy b≈Çƒôdnych rekord√≥w:', error.message);
    }
  }

  printFinalStats() {
    const duration = this.uploadStats.endTime && this.uploadStats.startTime ?
      Math.round((this.uploadStats.endTime - this.uploadStats.startTime) / 1000) : 0;

    console.log('\n' + '='.repeat(60));
    console.log(`üéØ PODSUMOWANIE ${this.dryRun ? '(DRY RUN) ' : ''}UPLOADU ZNORMALIZOWANYCH KLIENT√ìW`);
    console.log('='.repeat(60));
    console.log(`üìä Ca≈Çkowity czas: ${duration}s`);
    console.log(`üìä Klient√≥w do uploadu: ${this.uploadStats.total}`);
    console.log(`‚úÖ Pomy≈õlnie ${this.dryRun ? 'zwalidowanych' : 'zapisanych'}: ${this.uploadStats.uploaded}`);
    console.log(`‚ùå B≈Çƒôd√≥w: ${this.uploadStats.errors}`);
    console.log(`üìà Sukces: ${this.uploadStats.total > 0 ? Math.round((this.uploadStats.uploaded / this.uploadStats.total) * 100) : 0}%`);
    console.log('');
    console.log('üîó STRUKTURA DANYCH:');
    console.log('   ‚Ä¢ ≈πr√≥d≈Ço: split_investment_data_normalized/clients_normalized.json');
    console.log('   ‚Ä¢ Document ID: Oryginalne ID klienta (string)');
    console.log('   ‚Ä¢ id: Numeryczne ID (number)');
    console.log('   ‚Ä¢ fullName: Pe≈Çna nazwa klienta (string)');
    console.log('   ‚Ä¢ companyName: Nazwa firmy (string)');
    console.log('   ‚Ä¢ phone: Telefon (string)');
    console.log('   ‚Ä¢ email: Email (string)');
    console.log('   ‚Ä¢ dataVersion: "2.0" (string)');
    console.log('   ‚Ä¢ migrationSource: "normalized_json_import" (string)');
    console.log('   ‚Ä¢ createdAt/uploadedAt: Firebase Timestamps');
    console.log('');
    console.log('üí° U≈ªYCIE:');
    console.log('   node upload_normalized_clients.js                 # Normalny upload');
    console.log('   node upload_normalized_clients.js --dry-run       # Symulacja (bez zapisu)');
    console.log('   node upload_normalized_clients.js --cleanup       # Wyczy≈õƒá przed uploadem');
    console.log('   node upload_normalized_clients.js --report        # Szczeg√≥≈Çowy raport');
    console.log('   node upload_normalized_clients.js --cleanup --report # Pe≈Çny tryb');
    console.log('='.repeat(60));
  }
}

// G≈Ç√≥wna funkcja
async function main() {
  console.log('üöÄ NORMALIZED CLIENTS UPLOADER v1.0');
  console.log('üìÖ Data:', new Date().toLocaleString('pl-PL'));
  console.log('='.repeat(50));

  // Sprawd≈∫ argumenty wiersza polece≈Ñ
  const args = process.argv.slice(2);

  const uploader = new NormalizedClientsUploader();
  uploader.dryRun = args.includes('--dry-run');
  uploader.cleanup = args.includes('--cleanup');
  uploader.showReport = args.includes('--report');

  if (uploader.dryRun) {
    console.log('üîß Tryb DRY RUN: symulacja bez zapisu do bazy');
  }
  if (uploader.cleanup && !uploader.dryRun) {
    console.log('üßπ Tryb CLEANUP: wyczyszczenie kolekcji przed uploadem');
  }
  if (uploader.showReport) {
    console.log('üìä Tryb REPORT: szczeg√≥≈Çowe raporty i statystyki');
  }

  try {
    // 1. Inicjalizacja Firebase
    await uploader.initialize();

    // 2. Sprawd≈∫ istniejƒÖce dane
    await uploader.checkExistingClients();

    // 3. Czyszczenie (je≈õli wymagane)
    await uploader.cleanupExistingClients();

    // 4. Za≈Çaduj znormalizowane dane klient√≥w
    const clients = await uploader.loadNormalizedClientsData();

    // 5. Potwierd≈∫ upload (je≈õli nie dry run)
    if (!uploader.dryRun) {
      console.log(`\n‚ùì Czy chcesz kontynuowaƒá upload ${clients.length} znormalizowanych klient√≥w?`);
      console.log('   Naci≈õnij Ctrl+C aby anulowaƒá lub Enter aby kontynuowaƒá...');
      // W ≈õrodowisku produkcyjnym mo≈ºna dodaƒá readline do potwierdzenia
      await new Promise(resolve => setTimeout(resolve, 2000));
    }

    // 6. Upload w batchach
    await uploader.uploadClientsInBatches(clients);

    // 7. Weryfikacja
    await uploader.verifyUpload();

    // 8. Szczeg√≥≈Çowy raport
    await uploader.generateReport();

    console.log(`\nüéâ ${uploader.dryRun ? 'Symulacja' : 'Upload'} zako≈Ñczon${uploader.dryRun ? 'a' : 'y'} pomy≈õlnie!`);
    process.exit(0);

  } catch (error) {
    console.error('\nüí• KRYTYCZNY B≈ÅƒÑD:', error.message);
    console.error('Stack trace:', error.stack);
    process.exit(1);
  }
}

// Obs≈Çuga sygna≈Ç√≥w
process.on('SIGINT', () => {
  console.log('\nüõë Upload anulowany przez u≈ºytkownika');
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• Nieobs≈Çu≈ºone odrzucenie Promise:', reason);
  process.exit(1);
});

// Uruchom program
if (require.main === module) {
  main();
}

module.exports = { NormalizedClientsUploader };
