rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Require authentication for all reads and writes
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
    
    // Clients collection
    match /clients/{clientId} {
      allow read, write: if request.auth != null;
      // Simplified create rule - just require auth and basic structure
      allow create: if request.auth != null && 
        resource == null &&
        request.resource.data.keys().hasAny(['name', 'fullName']) &&
        request.resource.data.keys().hasAll(['createdAt', 'updatedAt']);
      // More flexible update rule
      allow update: if request.auth != null;
    }
    
    // Investments collection
    match /investments/{investmentId} {
      allow read, write: if request.auth != null;
      allow create: if request.auth != null && 
        resource == null &&
        request.resource.data.keys().hasAll(['clientId', 'employeeId', 'productType', 'investmentAmount', 'createdAt', 'updatedAt']);
      // Allow more flexible updates - just require authentication
      allow update: if request.auth != null;
    }
    
    // Products collection
    match /products/{productId} {
      allow read, write: if request.auth != null;
      allow create: if request.auth != null && 
        resource == null &&
        request.resource.data.keys().hasAll(['name', 'type', 'companyId', 'createdAt', 'updatedAt']);
    }
    
    // Companies collection
    match /companies/{companyId} {
      allow read, write: if request.auth != null;
    }
    
    // Employees collection
    match /employees/{employeeId} {
      allow read, write: if request.auth != null;
    }
    
    // Analytics collection (read-only for most users)
    match /analytics/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // You might want to restrict this further
    }
    
    // Investment change history collection
    match /investment_change_history/{historyId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        resource == null &&
        request.resource.data.keys().hasAll(['investmentId', 'userId', 'changedAt', 'changeType']);
      // Prevent updates and deletes for audit trail integrity
      allow update, delete: if false;
    }
    
    // Scheduled emails collection
    match /scheduled_emails/{emailId} {
      allow read, write: if request.auth != null;
      allow create: if request.auth != null && 
        resource == null &&
        request.resource.data.keys().hasAll(['recipientsData', 'subject', 'htmlContent', 'scheduledDateTime', 'senderEmail', 'senderName', 'status', 'createdAt', 'createdBy']);
      // Allow updates for status changes (pending -> sending -> sent/failed)
      allow update: if request.auth != null;
    }
    
    // Voting status changes collection
    match /voting_status_changes/{changeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        resource == null &&
        request.resource.data.keys().hasAll(['investorId', 'clientId', 'clientName', 'changeType', 'editedBy', 'editedByEmail', 'changedAt']);
      // Prevent updates and deletes for audit trail integrity
      allow update, delete: if false;
    }
  }
}
