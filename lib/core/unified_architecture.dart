/// üöÄ ZUNIFIKOWANA ARCHITEKTURA APLIKACJI
///
/// Centralna architektura dla wszystkich komponent√≥w aplikacji.
/// Zapewnia jednolito≈õƒá typ√≥w danych, serwis√≥w i konwersji.
///
/// G≈Ç√≥wne za≈Ço≈ºenia:
/// - Zunifikowane ID produkt√≥w: bond_0001, loan_0002, share_0003, apartment_0004
/// - Jednolite typy danych dla wszystkich komponent√≥w
/// - Centralne zarzƒÖdzanie cache
/// - Automatyczne konwersje miƒôdzy typami
/// - Fallback hierarchy dla r√≥≈ºnych format√≥w danych

import 'package:flutter/foundation.dart';
import '../models_and_services.dart';

/// üéØ G≈Å√ìWNY INTERFEJS ZUNIFIKOWANEJ ARCHITEKTURY
abstract class UnifiedArchitecture {
  /// Preferencje dla u≈ºywanych serwis√≥w w hierarchii
  static const ServicePreferences preferences = ServicePreferences();

  /// G≈Ç√≥wne typy produkt√≥w w hierarchii preferencji
  static const ProductTypeHierarchy productTypes = ProductTypeHierarchy();

  /// Strategia cache dla r√≥≈ºnych komponent√≥w
  static const CacheStrategy cacheStrategy = CacheStrategy();
}

/// ‚öôÔ∏è PREFERENCJE SERWIS√ìW - HIERARCHIA U≈ªYCIA
class ServicePreferences {
  const ServicePreferences();

  /// Hierarchia serwis√≥w produkt√≥w (od najnowszego do fallback)
  List<Type> get productServicesHierarchy => [
    OptimizedProductService, // üöÄ Najbardziej zoptymalizowany
    ProductManagementService, // üîÑ Centralny zarzƒÖdzajƒÖcy
    DeduplicatedProductService, // üìä Deduplikowany
    FirebaseFunctionsProductsService, // üî• Server-side
    UnifiedProductService, // üì¶ Legacy unified
  ];

  /// Hierarchia serwis√≥w inwestor√≥w
  List<Type> get investorServicesHierarchy => [
    UltraPreciseProductInvestorsService, // ÔøΩ Ultra-precise server-side
    InvestorEditService, // ‚úèÔ∏è Business logic
  ];

  /// Preferowany serwis cache
  Type get preferredCacheService => CacheManagementService;
}

/// üìä HIERARCHIA TYP√ìW PRODUKT√ìW
class ProductTypeHierarchy {
  const ProductTypeHierarchy();

  /// Hierarchia typ√≥w danych produkt√≥w (od najnowszego)
  List<Type> get productTypesHierarchy => [
    OptimizedProduct, // üöÄ Najbardziej zoptymalizowany
    DeduplicatedProduct, // üìä Standard bez duplikat√≥w
    UnifiedProduct, // üì¶ Legacy unified
  ];

  /// Mapa konwersji miƒôdzy typami produkt√≥w
  Map<Type, Type> get conversionMap => {
    OptimizedProduct: DeduplicatedProduct,
    DeduplicatedProduct: UnifiedProduct,
    UnifiedProduct: OptimizedProduct,
  };
}

/// üíæ STRATEGIA CACHE
class CacheStrategy {
  const CacheStrategy();

  /// TTL dla r√≥≈ºnych typ√≥w danych (w minutach)
  Map<Type, int> get cacheTTL => {
    OptimizedProduct: 5, // 5 min dla zoptymalizowanych
    DeduplicatedProduct: 3, // 3 min dla deduplikowanych
    UnifiedProduct: 2, // 2 min dla legacy
    InvestorSummary: 2, // 2 min dla inwestor√≥w
  };

  /// Klucze cache dla r√≥≈ºnych komponent√≥w
  Map<String, String> get cacheKeys => {
    'products_management': 'products_management_v2',
    'product_details': 'product_details_v2',
    'investor_edit': 'investor_edit_v2',
  };
}

/// üîÑ CENTRALNE KONWERSJE TYP√ìW
class UnifiedTypeConverters {
  /// Konwertuje OptimizedProduct na DeduplicatedProduct
  static DeduplicatedProduct optimizedToDeduplicatedProduct(
    OptimizedProduct opt,
  ) {
    return DeduplicatedProduct(
      id: opt.id,
      name: opt.name,
      productType: opt.productType,
      companyId: opt.companyId,
      companyName: opt.companyName,
      totalValue: opt.totalValue,
      totalRemainingCapital: opt.totalRemainingCapital,
      totalInvestments: opt.totalInvestments,
      uniqueInvestors: opt.uniqueInvestors,
      actualInvestorCount: opt.actualInvestorCount,
      averageInvestment: opt.averageInvestment,
      earliestInvestmentDate: opt.earliestInvestmentDate,
      latestInvestmentDate: opt.latestInvestmentDate,
      status: opt.status,
      interestRate: opt.interestRate,
      maturityDate: null, // OptimizedProduct nie ma tego pola
      originalInvestmentIds: [], // Mo≈ºna wype≈Çniƒá z metadata je≈õli dostƒôpne
      metadata: opt.metadata,
    );
  }

  /// Konwertuje DeduplicatedProduct na UnifiedProduct
  static UnifiedProduct deduplicatedToUnifiedProduct(
    DeduplicatedProduct dedup,
  ) {
    return UnifiedProduct(
      id: dedup.id,
      name: dedup.name,
      productType: dedup.productType,
      investmentAmount: dedup.totalValue,
      createdAt: dedup.earliestInvestmentDate,
      uploadedAt: dedup.latestInvestmentDate,
      sourceFile: dedup.metadata['sourceFile']?.toString() ?? 'unified',
      status: dedup.status,
      additionalInfo: dedup.metadata,
      // Wype≈Çnij brakujƒÖce pola warto≈õciami domy≈õlnymi lub z metadata
      realizedCapital: null,
      remainingCapital: dedup.totalRemainingCapital,
      realizedInterest: null,
      remainingInterest: null,
      realizedTax: null,
      remainingTax: null,
      transferToOtherProduct: null,
      sharesCount: null,
      pricePerShare: null,
      interestRate: dedup.interestRate,
      maturityDate: dedup.maturityDate,
      companyName: dedup.companyName,
      companyId: dedup.companyId,
      currency: 'PLN',
      originalProduct: dedup,
    );
  }

  /// Konwertuje OptimizedProduct na UnifiedProduct (poprzez DeduplicatedProduct)
  static UnifiedProduct optimizedToUnifiedProduct(OptimizedProduct opt) {
    final deduplicated = optimizedToDeduplicatedProduct(opt);
    return deduplicatedToUnifiedProduct(deduplicated);
  }
}

/// üéØ ZUNIFIKOWANY RESOLVER ID PRODUKT√ìW
class UnifiedProductIdResolver {
  /// Cache dla rozpoznanych ID
  static final Map<String, String> _resolvedIds = {};

  /// Rozpoznaje rzeczywisty productId na podstawie r√≥≈ºnych format√≥w
  static String resolveProductId(
    String inputId, {
    String? productName,
    String? companyId,
    UnifiedProductType? productType,
  }) {
    // Sprawd≈∫ cache
    final cacheKey = '$inputId-$productName-$companyId';
    if (_resolvedIds.containsKey(cacheKey)) {
      return _resolvedIds[cacheKey]!;
    }

    String resolvedId = inputId;

    // 1. Je≈õli ju≈º jest w formacie zunifikowanym, zwr√≥ƒá
    if (isUnifiedFormat(inputId)) {
      _resolvedIds[cacheKey] = inputId;
      return inputId;
    }

    // 2. Je≈õli to hash z DeduplicatedService, spr√≥buj rozpoznaƒá
    if (_isHashFormat(inputId) && productType != null) {
      resolvedId = _generateUnifiedIdFromType(productType, inputId);
    }

    // 3. Je≈õli to UUID, spr√≥buj mapowaƒá na podstawie productType
    if (_isUuidFormat(inputId) && productType != null) {
      resolvedId = _generateUnifiedIdFromType(productType, inputId);
    }

    if (kDebugMode) {
      print('üîç [UnifiedProductIdResolver] $inputId ‚Üí $resolvedId');
    }

    _resolvedIds[cacheKey] = resolvedId;
    return resolvedId;
  }

  /// Sprawdza czy ID jest w zunifikowanym formacie (bond_0001, loan_0002, etc.)
  static bool isUnifiedFormat(String id) {
    final regex = RegExp(r'^(bond|loan|share|apartment)_\d{4}$');
    return regex.hasMatch(id);
  }

  /// Sprawdza czy ID to hash (MD5/SHA)
  static bool _isHashFormat(String id) {
    final regex = RegExp(r'^[a-f0-9]{32}$|^[a-f0-9]{40}$');
    return regex.hasMatch(id);
  }

  /// Sprawdza czy ID to UUID
  static bool _isUuidFormat(String id) {
    final regex = RegExp(
      r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$',
    );
    return regex.hasMatch(id);
  }

  /// Generuje zunifikowane ID na podstawie typu produktu
  static String _generateUnifiedIdFromType(
    UnifiedProductType type,
    String fallbackId,
  ) {
    final prefix = type.name.toLowerCase();
    // W rzeczywistej implementacji tutaj by≈Çoby zapytanie do Firebase
    // aby znale≈∫ƒá rzeczywiste ID. Na razie u≈ºywamy fallback
    final hashCode = fallbackId.hashCode
        .abs()
        .toString()
        .padLeft(4, '0')
        .substring(0, 4);
    return '${prefix}_$hashCode';
  }

  /// Czy≈õci cache (u≈ºyteczne przy testach)
  static void clearCache() {
    _resolvedIds.clear();
  }
}

/// üöÄ ZUNIFIKOWANY SERWIS DANYCH
///
/// G≈Ç√≥wny punkt dostƒôpu do wszystkich danych w aplikacji.
/// Automatycznie wybiera najlepszy dostƒôpny serwis i typ danych.
class UnifiedDataService {
  static UnifiedDataService? _instance;
  static UnifiedDataService get instance =>
      _instance ??= UnifiedDataService._();
  UnifiedDataService._();

  // Serwisy w hierarchii preferencji
  late final OptimizedProductService _optimizedProductService;
  late final DeduplicatedProductService _deduplicatedProductService;
  late final UltraPreciseProductInvestorsService _investorsService;

  bool _initialized = false;

  /// Inicjalizuje wszystkie serwisy
  Future<void> initialize() async {
    if (_initialized) return;

    _optimizedProductService = OptimizedProductService();
    _deduplicatedProductService = DeduplicatedProductService();
    _investorsService = UltraPreciseProductInvestorsService();

    _initialized = true;

    if (kDebugMode) {
      print('‚úÖ [UnifiedDataService] Zainicjalizowano wszystkie serwisy');
    }
  }

  /// üìä G≈Å√ìWNA METODA - Pobiera produkty w najlepszym dostƒôpnym formacie
  Future<UnifiedProductsResponse> getProducts({
    bool forceRefresh = false,
    bool includeStatistics = true,
    ProductsDataLevel dataLevel = ProductsDataLevel.optimized,
  }) async {
    await initialize();

    try {
      switch (dataLevel) {
        case ProductsDataLevel.optimized:
          return await _getOptimizedProducts(forceRefresh, includeStatistics);
        case ProductsDataLevel.deduplicated:
          return await _getDeduplicatedProducts(
            forceRefresh,
            includeStatistics,
          );
        case ProductsDataLevel.unified:
          return await _getUnifiedProducts(forceRefresh, includeStatistics);
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå [UnifiedDataService] B≈ÇƒÖd pobierania produkt√≥w: $e');
      }

      // Fallback do ni≈ºszego poziomu
      if (dataLevel != ProductsDataLevel.unified) {
        final fallbackLevel = dataLevel == ProductsDataLevel.optimized
            ? ProductsDataLevel.deduplicated
            : ProductsDataLevel.unified;
        return await getProducts(
          forceRefresh: forceRefresh,
          includeStatistics: includeStatistics,
          dataLevel: fallbackLevel,
        );
      }

      rethrow;
    }
  }

  /// Pobiera inwestor√≥w dla produktu - ULTRA PRECYZYJNE API
  Future<ProductInvestorsResult> getProductInvestors({
    required String productId,
    required String productName,
    required String productType,
    bool forceRefresh = false,
  }) async {
    await initialize();

    // Rozpoznaj rzeczywisty productId
    final resolvedId = UnifiedProductIdResolver.resolveProductId(
      productId,
      productName: productName,
    );

    // U≈ºyj ultra-precyzyjnej us≈Çugi
    final ultraResult = await _investorsService.getProductInvestors(
      productId: resolvedId,
      productName: productName,
      searchStrategy: 'productId',
      forceRefresh: forceRefresh,
    );

    // Adaptuj wynik do standardowego formatu
    return _adaptUltraPreciseResult(ultraResult, productType, productName);
  }

  /// üîÑ ADAPTER: Konwertuje ultra-precyzyjny wynik na standardowy format
  ProductInvestorsResult _adaptUltraPreciseResult(
    UltraPreciseProductInvestorsResult ultraResult,
    String productType,
    String productName,
  ) {
    return ProductInvestorsResult(
      investors: ultraResult.investors,
      totalCount: ultraResult.totalCount,
      statistics: ProductInvestorsStatistics(
        totalCapital: ultraResult.statistics.totalCapital,
        totalInvestments: ultraResult.statistics.totalInvestments,
        averageCapital: ultraResult.statistics.averageCapital,
        activeInvestors:
            ultraResult.totalCount, // Liczba aktywnych = totalCount
      ),
      searchStrategy: '${ultraResult.searchStrategy}_ultra_precise',
      productName: productName,
      productType: productType,
      executionTime: ultraResult.executionTime,
      fromCache: ultraResult.fromCache,
      error: ultraResult.error,
    );
  }

  /// Edytuje inwestora - uproszczona wersja bez UI dependencies
  Future<bool> editInvestor(Map<String, dynamic> data) async {
    await initialize();
    // Uproszczona wersja - szczeg√≥≈Çy implementacji w UI layerze
    return true;
  }

  /// Czy≈õci cache wszystkich serwis√≥w
  Future<void> clearCache() async {
    await initialize();
    UnifiedProductIdResolver.clearCache();
    // Tutaj mo≈ºna dodaƒá czyszczenie cache innych serwis√≥w
  }

  /// Prywatne metody implementacyjne

  Future<UnifiedProductsResponse> _getOptimizedProducts(
    bool forceRefresh,
    bool includeStatistics,
  ) async {
    final result = await _optimizedProductService.getAllProductsOptimized(
      forceRefresh: forceRefresh,
      includeStatistics: includeStatistics,
    );

    return UnifiedProductsResponse(
      products: result.products
          .map(UnifiedTypeConverters.optimizedToUnifiedProduct)
          .toList(),
      deduplicatedProducts: result.products
          .map(UnifiedTypeConverters.optimizedToDeduplicatedProduct)
          .toList(),
      optimizedProducts: result.products,
      statistics: result.statistics,
      dataLevel: ProductsDataLevel.optimized,
    );
  }

  Future<UnifiedProductsResponse> _getDeduplicatedProducts(
    bool forceRefresh,
    bool includeStatistics,
  ) async {
    final products = await _deduplicatedProductService.getAllUniqueProducts();

    return UnifiedProductsResponse(
      products: products
          .map(UnifiedTypeConverters.deduplicatedToUnifiedProduct)
          .toList(),
      deduplicatedProducts: products,
      optimizedProducts: [], // Brak dla tego poziomu
      statistics: null, // Placeholder - mo≈ºna dodaƒá implementacjƒô
      dataLevel: ProductsDataLevel.deduplicated,
    );
  }

  Future<UnifiedProductsResponse> _getUnifiedProducts(
    bool forceRefresh,
    bool includeStatistics,
  ) async {
    // Placeholder - tutaj by≈Çoby wywo≈Çanie do Firebase Functions
    // Na razie fallback do deduplicated
    return await _getDeduplicatedProducts(forceRefresh, includeStatistics);
  }
}

/// üìä POZIOMY DANYCH
enum ProductsDataLevel {
  optimized, // OptimizedProduct - najszybszy
  deduplicated, // DeduplicatedProduct - standard
  unified, // UnifiedProduct - legacy
}

/// üìã ZUNIFIKOWANA ODPOWIED≈π
class UnifiedProductsResponse {
  final List<UnifiedProduct> products;
  final List<DeduplicatedProduct> deduplicatedProducts;
  final List<OptimizedProduct> optimizedProducts;
  final dynamic statistics;
  final ProductsDataLevel dataLevel;

  const UnifiedProductsResponse({
    required this.products,
    required this.deduplicatedProducts,
    required this.optimizedProducts,
    required this.statistics,
    required this.dataLevel,
  });
}
